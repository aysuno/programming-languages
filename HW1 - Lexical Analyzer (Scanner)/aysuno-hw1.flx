%{
	#include <string.h>
	#include <stdio.h>
	#include <stdbool.h>
	int location = 1;
%}
tGET 		\"Get\"
tSET 		\"Set\"
tFUNCTION 	\"Function\"
tPRINT 		\"Print\"
tFOR 		\"For\"
tIF 		\"If\"
tRETURN 	\"Return\"
tCOMMA 		\,
tPLUS 		\"\+\"
tMUL 		\"\*\"
tINC 		\"\+\+\"
tLBRAC 		\[
tGT 		\"\>\"
tGEQ 		\"\>\=\"
tEQUALITY 	\"\=\=\"
tMINUS 		\"\-\"
tDIV 		\"\/\"
tDEC 		\"\-\-\"
tRBRAC 		\]
tLT 		\"\<\"
tLEQ 		\"\<\=\"
tIDENT 		\"[a-zA-Z_][a-zA-Z0-9_]*\"
tNUM 		[-]?(([0-9]+)|([0-9]+\.[0-9]+))
tSTRING		\'[^']*\'

%%
\n 				location++;
{tGET} 			printf("%d tGET\n", location);
{tSET} 			printf("%d tSET\n", location);
{tFUNCTION} 	printf("%d tFUNCTION\n", location);
{tPRINT} 		printf("%d tPRINT\n", location);
{tFOR} 			printf("%d tFOR\n", location);
{tIF} 			printf("%d tIF\n", location);
{tRETURN}		printf("%d tRETURN\n", location);
{tCOMMA}      	printf("%d tCOMMA\n", location);
{tPLUS}			printf("%d tPLUS\n", location);
{tMUL}			printf("%d tMUL\n", location);
{tINC}       	printf("%d tINC\n", location);
{tLBRAC}    	printf("%d tLBRAC\n", location);
{tGT}       	printf("%d tGT\n", location);
{tGEQ}      	printf("%d tGEQ\n", location);
{tEQUALITY}     printf("%d tEQUALITY\n", location);
{tMINUS}        printf("%d tMINUS\n", location);
{tDIV}          printf("%d tDIV\n", location);
{tDEC}          printf("%d tDEC\n", location);
{tRBRAC}        printf("%d tRBRAC\n", location);
{tLT}   		printf("%d tLT\n", location);
{tLEQ}          printf("%d tLEQ\n", location);
{tIDENT}		{
					char actualString[yyleng-1];
					int i = 0;
					for(i = 0; i < (yyleng-2); i++){
						actualString[i] = yytext[i+1];
					}
					actualString[yyleng-2] = '\0';
					printf("%d tIDENT (%s)\n", location, actualString);
				}
{tNUM}			{
					char dest[] = "";
					bool sign = false;
					bool decimal = false;
					int index = 0;
					int l = 0;
					int dotLocation;

					for(index = 0; index < yyleng; index++) {   
						if(yytext[index] == '.'){
							decimal = true;
							dotLocation = index;
						}
						if(yytext[index] == '-'){
							sign = true;
							char signch = '-';
							strncat(dest, &signch, 1);
						}
					}

					int y;
					if(sign) y = 1;
					if(!sign) y = 0;

					if(decimal == false){
						int z = -1;
						for (; y < yyleng; y++) {
							if (yytext[y] != '0') {
								z = y;
								break;
							}
						}
						if(z == -1){ 
							char only = '0';
							strncat(dest, &only, 1);
						}
						else{
							for (y = z; y < yyleng; y++) {
								strncat(dest, &yytext[y], 1);
							}
						}
						printf("%d tNUM (%s) (%s)\n", location, yytext, dest);
					}

					else if (decimal == true){
						int z = -1;
						for (; y < dotLocation; y++) {
							if (yytext[y] != '0') {
								z = y;
								break;
							}
						}
						if(z == -1){ 
							char only = '0';
							strncat(dest, &only, 1);
						}
						else{
							for (y = z; y < dotLocation; y++) {
								strncat(dest, &yytext[y], 1);
							}
						}

						char dot = '.';
						strncat(dest, &dot, 1);

						z = -1;
						int c = dotLocation + 1;
						for (; c < yyleng; c++) {
							if (yytext[c] != '0') {
								z = c;
							}
						}
						if(z == -1){
							char only = '0';
							strncat(dest, &only, 1);
						}
						else{
							for (c = dotLocation+1; c < z+1; c++) {
								strncat(dest, &yytext[c], 1);
							}
						}
					printf("%d tNUM (%s) (%s)\n", location, yytext, dest);
					}
				}

{tSTRING}		{
					int k = 0;
					int stringLoc = 0;
					for(k = 0; k < yyleng; k++){
						if(yytext[k] == '\n'){
							location++;
							stringLoc++;
						}
					}
					char lastString[yyleng-1];
					int m = 0;
					for(m = 0; m < (yyleng-2); m++){
						lastString[m] = yytext[m+1];
					}
					lastString[yyleng-2] = '\0';
					printf("%d tSTRING (%s)\n",(location-stringLoc), lastString);
				}

\t

\r

" "

. 				printf("%d ILLEGAL CHARACTER (%s)\n",location, yytext);

%%

int main()
{
	yylex();
	return(0);
}